openapi: 3.0.3
info:
  title: Giannitsa Web App BFF API
  description: A simple API to allow server-client communications
  contact:
    name: Szabolcs Bazil Papp
    email: papp.szabolcs.bazil@gmail.com
  version: 1.0.0

tags:
  - name: Auth
    description: Authentication related endpoints
  - name: View
    description: Endpoints for loading view specific information
  - name: Article
    description: Article categorisation and CRUD operations
  - name: Schedule
    description: CRUD operations for schedules
  - name: Image
    description: Endpoints for accessing images

paths:

  # Auth
  /auth/login:
    post:
      summary: Attempts authentication.
      description: |
        Submits an username-password authentication request for login purposes.
      tags:
        - Auth
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
  /auth:
    get:
      summary: Checks for authentication.
      description: |
        Pings the server with the authentication token included as a bearer token to check
        for its validity.
      tags:
        - Auth
      operationId: isAuthenticated
      responses:
        '200':
          description: Ok
        '403':
          description: Unauthorized

  # Article
  /categories:
    get:
      summary: List all categories
      description: |
        Returns a list of categories available with the provided
        authorisation (regular and anonymous users may only receive a
        subset of categories available to administrators).
      tags:
        - Article
      operationId: listCategories
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

    post:
      summary: Create a new category
      description: |
        Creates a new, empty category. The category's URL-safe unique code
        is generated server side, and must be unique.
      tags:
        - Article
      operationId: createCategory
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        '201':
          description: Category has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '401':
          description: Insufficient authorization for category creation.
        '409':
          description: Category already exists.

  /categories/{category}:
    get:
      summary: Return the first page of articles in a category
      description: |
        ...
      tags:
        - Article
      operationId: getRecentArticles
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArticlePreview'
        '401':
          description: Insufficient authorization to fetch category contents.
        '404':
          description: Unknown category

    delete:
      summary: Delete a category
      description: |
        Deletes a category, moving its contents to the archived category. The archived category
        may not be deleted.
      tags:
        - Article
      operationId: deleteCategory
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category deleted
        '401':
          description: Insufficient authorization to delete category.

    post:
      summary: Creates a new article in this category
      description: |
        ...
      tags:
        - Article
      operationId: uploadArticle
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: |
                    The desired title of the article
                issued:
                  type: string
                  format: date
                  description: |
                    The date for which this article is issued, may be null.
                author:
                  type: string
                  description: |
                    The name of the article's author. If null, the uploader is considered the author.
                description:
                  type: string
                  description: |
                    Succinct description for the article.
                documentFile:
                  type: string
                  format: binary
              required: [ title, issued, author, description, documentFile ]
      responses:
        '201':
          description: Created


  /categories/{category}/{page}:
    get:
      summary: Return the Nth page of a categories articles
      description: |
        ...
      tags:
        - Article
      operationId: getArticles
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArticlePreview'
        '401':
          description: Insufficient authorization to fetch category contents.
        '404':
          description: Unknown category

  /articles/{article}:
    get:
      summary: Load the contents of an article
      description: |
        ...
      tags:
        - Article
      operationId: getArticle
      parameters:
        - in: path
          name: article
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleDetail'

components:
  schemas:

    AuthenticationRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required: [ username, password ]
    AuthenticationResponse:
      type: object
      properties:
        token:
          type: string

    Category:
      type: object
      properties:
        code:
          type: string
          description: |
            URL-safe unique identifier.
          example: homilies
        displayValue:
          type: string
          example: Homilies
      required: [ code, displayValue ]

    ArticlePreview:
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
          description: |
            URL-safe unique identifier.
        title:
          type: string
        description:
          type: string
        thumbnail:
          type: string
          format: uuid
          description: |
            The unique identifier of the image to be as thumbnail for
            the article.
      required: [ id, title, description ]

    ArticleDetail:
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
          description: |
            URL-safe unique identifier.
        title:
          type: string
        paragraphs:
          type: array
          items:
            $ref: '#/components/schemas/Paragraph'
      required: [ id, code, title, paragraphs ]

    Paragraph:
      type: object
      properties:
        title:
          type: string
        text:
          type: string
        image:
          type: string
          format: uuid