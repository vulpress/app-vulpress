/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package hu.aestallon.vulpress.app.rest.api;

import hu.aestallon.vulpress.app.rest.model.AuthenticationRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "registration", description = "Registration related endpoints")
public interface RegistrationApi {

    default RegistrationApiDelegate getDelegate() {
        return new RegistrationApiDelegate() {};
    }

    /**
     * POST /registration : Submits a registration.
     * ... 
     *
     * @param authenticationRequest  (required)
     * @return Registration accepted (status code 201)
     *         or Username taken (status code 409)
     *         or Inappropriate properties (status code 422)
     */
    @Operation(
        operationId = "registerAccount",
        summary = "Submits a registration.",
        tags = { "Registration" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Registration accepted"),
            @ApiResponse(responseCode = "409", description = "Username taken"),
            @ApiResponse(responseCode = "422", description = "Inappropriate properties")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/registration",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> registerAccount(
        @Parameter(name = "AuthenticationRequest", description = "", required = true) @Valid @RequestBody AuthenticationRequest authenticationRequest
    ) {
        return getDelegate().registerAccount(authenticationRequest);
    }


    /**
     * GET /registration : Activates a registration.
     * ... 
     *
     * @param registrationToken  (required)
     * @return Idempotent OK.  Attempting to verify a valid registration token always returns with this response.  (status code 200)
     *         or Unknown registration (status code 400)
     */
    @Operation(
        operationId = "verifyAccount",
        summary = "Activates a registration.",
        tags = { "Registration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Idempotent OK.  Attempting to verify a valid registration token always returns with this response. "),
            @ApiResponse(responseCode = "400", description = "Unknown registration")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/registration"
    )
    default ResponseEntity<Void> verifyAccount(
        @NotNull @Parameter(name = "registrationToken", description = "", required = true) @Valid @RequestParam(value = "registrationToken", required = true) java.util.UUID registrationToken
    ) {
        return getDelegate().verifyAccount(registrationToken);
    }

}
