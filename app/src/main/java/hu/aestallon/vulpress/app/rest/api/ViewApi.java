/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package hu.aestallon.vulpress.app.rest.api;

import hu.aestallon.vulpress.app.rest.model.AppBarModel;
import hu.aestallon.vulpress.app.rest.model.UiAction;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "view", description = "Endpoints for loading view specific information")
public interface ViewApi {

    default ViewApiDelegate getDelegate() {
        return new ViewApiDelegate() {};
    }

    /**
     * GET /view/{viewName}/actions : Returns the available actions for a given view.
     * Returns the UiActions (usually represented as buttons) for a given view. 
     *
     * @param viewName  (required)
     * @param pageName  (optional)
     * @return Ok (status code 200)
     *         or Unknown view name (status code 404)
     */
    @Operation(
        operationId = "getActions",
        summary = "Returns the available actions for a given view.",
        tags = { "View" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UiAction.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unknown view name")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/view/{viewName}/actions",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UiAction>> getActions(
        @Parameter(name = "viewName", description = "", required = true) @PathVariable("viewName") String viewName,
        @Parameter(name = "pageName", description = "") @Valid @RequestParam(value = "pageName", required = false) Optional<String> pageName
    ) {
        return getDelegate().getActions(viewName, pageName);
    }


    /**
     * GET /view/app : Returns the state of the app bar.
     * Returns the state of the app bar, including the title of the application, the logged-in status (for rendering the profile drop-down menu), and the available UiActions in the hamburger menu. 
     *
     * @return Ok (status code 200)
     */
    @Operation(
        operationId = "getAppBar",
        summary = "Returns the state of the app bar.",
        tags = { "View" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppBarModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/view/app",
        produces = { "application/json" }
    )
    default ResponseEntity<AppBarModel> getAppBar(
        
    ) {
        return getDelegate().getAppBar();
    }

}
