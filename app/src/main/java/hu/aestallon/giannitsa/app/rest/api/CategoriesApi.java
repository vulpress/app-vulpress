/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package hu.aestallon.giannitsa.app.rest.api;

import hu.aestallon.giannitsa.app.rest.model.ArticlePreview;
import hu.aestallon.giannitsa.app.rest.model.Category;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.LocalDate;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "categories", description = "Article categorisation and CRUD operations")
public interface CategoriesApi {

    default CategoriesApiDelegate getDelegate() {
        return new CategoriesApiDelegate() {};
    }

    /**
     * POST /categories : Create a new category
     * Creates a new, empty category. The category&#39;s URL-safe unique code is generated server side, and must be unique. 
     *
     * @param body  (optional)
     * @return Category has been created. (status code 201)
     *         or Insufficient authorization for category creation. (status code 401)
     *         or Category already exists. (status code 409)
     */
    @Operation(
        operationId = "createCategory",
        summary = "Create a new category",
        tags = { "Article" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Category has been created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Category.class))
            }),
            @ApiResponse(responseCode = "401", description = "Insufficient authorization for category creation."),
            @ApiResponse(responseCode = "409", description = "Category already exists.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/categories",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Category> createCategory(
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) String body
    ) {
        return getDelegate().createCategory(body);
    }


    /**
     * DELETE /categories/{category} : Delete a category
     * Deletes a category, moving its contents to the archived category. The archived category may not be deleted. 
     *
     * @param category  (required)
     * @return Category deleted (status code 200)
     *         or Insufficient authorization to delete category. (status code 401)
     */
    @Operation(
        operationId = "deleteCategory",
        summary = "Delete a category",
        tags = { "Article" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Category deleted"),
            @ApiResponse(responseCode = "401", description = "Insufficient authorization to delete category.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/categories/{category}"
    )
    default ResponseEntity<Void> deleteCategory(
        @Parameter(name = "category", description = "", required = true) @PathVariable("category") String category
    ) {
        return getDelegate().deleteCategory(category);
    }


    /**
     * GET /categories/{category}/{page} : Return the Nth page of a categories articles
     * ... 
     *
     * @param category  (required)
     * @param page  (required)
     * @return Ok (status code 200)
     *         or Insufficient authorization to fetch category contents. (status code 401)
     *         or Unknown category (status code 404)
     */
    @Operation(
        operationId = "getArticles",
        summary = "Return the Nth page of a categories articles",
        tags = { "Article" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ArticlePreview.class))
            }),
            @ApiResponse(responseCode = "401", description = "Insufficient authorization to fetch category contents."),
            @ApiResponse(responseCode = "404", description = "Unknown category")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/categories/{category}/{page}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ArticlePreview>> getArticles(
        @Parameter(name = "category", description = "", required = true) @PathVariable("category") String category,
        @Parameter(name = "page", description = "", required = true) @PathVariable("page") Integer page
    ) {
        return getDelegate().getArticles(category, page);
    }


    /**
     * GET /categories/{category} : Return the first page of articles in a category
     * ... 
     *
     * @param category  (required)
     * @return Ok (status code 200)
     *         or Insufficient authorization to fetch category contents. (status code 401)
     *         or Unknown category (status code 404)
     */
    @Operation(
        operationId = "getRecentArticles",
        summary = "Return the first page of articles in a category",
        tags = { "Article" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ArticlePreview.class))
            }),
            @ApiResponse(responseCode = "401", description = "Insufficient authorization to fetch category contents."),
            @ApiResponse(responseCode = "404", description = "Unknown category")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/categories/{category}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ArticlePreview>> getRecentArticles(
        @Parameter(name = "category", description = "", required = true) @PathVariable("category") String category
    ) {
        return getDelegate().getRecentArticles(category);
    }


    /**
     * GET /categories : List all categories
     * Returns a list of categories available with the provided authorisation (regular and anonymous users may only receive a subset of categories available to administrators). 
     *
     * @return Ok (status code 200)
     */
    @Operation(
        operationId = "listCategories",
        summary = "List all categories",
        tags = { "Article" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Category.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/categories",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Category>> listCategories(
        
    ) {
        return getDelegate().listCategories();
    }


    /**
     * POST /categories/{category} : Creates a new article in this category
     * ... 
     *
     * @param category  (required)
     * @param title The desired title of the article  (required)
     * @param issued The date for which this article is issued, may be null.  (required)
     * @param author The name of the article&#39;s author. If null, the uploader is considered the author.  (required)
     * @param description Succinct description for the article.  (required)
     * @param documentFile  (required)
     * @return Created (status code 201)
     */
    @Operation(
        operationId = "uploadArticle",
        summary = "Creates a new article in this category",
        tags = { "Article" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/categories/{category}",
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<Void> uploadArticle(
        @Parameter(name = "category", description = "", required = true) @PathVariable("category") String category,
        @Parameter(name = "title", description = "The desired title of the article ", required = true) @Valid @RequestParam(value = "title", required = true) String title,
        @Parameter(name = "issued", description = "The date for which this article is issued, may be null. ", required = true) @Valid @RequestParam(value = "issued", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate issued,
        @Parameter(name = "author", description = "The name of the article's author. If null, the uploader is considered the author. ", required = true) @Valid @RequestParam(value = "author", required = true) String author,
        @Parameter(name = "description", description = "Succinct description for the article. ", required = true) @Valid @RequestParam(value = "description", required = true) String description,
        @Parameter(name = "documentFile", description = "", required = true) @RequestPart(value = "documentFile", required = true) MultipartFile documentFile
    ) {
        return getDelegate().uploadArticle(category, title, issued, author, description, documentFile);
    }

}
