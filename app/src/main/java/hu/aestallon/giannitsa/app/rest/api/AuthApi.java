/*
 * Copyright 2023 Szabolcs Bazil Papp
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package hu.aestallon.giannitsa.app.rest.api;

import hu.aestallon.giannitsa.app.rest.model.AuthenticationRequest;
import hu.aestallon.giannitsa.app.rest.model.AuthenticationResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "auth", description = "the auth API")
public interface AuthApi {

    default AuthApiDelegate getDelegate() {
        return new AuthApiDelegate() {};
    }

    /**
     * GET /auth : Checks for authentication.
     * Pings the server with the authentication token included as a bearer token to check for its validity. 
     *
     * @return Ok (status code 200)
     *         or Unauthorized (status code 403)
     */
    @Operation(
        operationId = "isAuthenticated",
        summary = "Checks for authentication.",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok"),
            @ApiResponse(responseCode = "403", description = "Unauthorized")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/auth"
    )
    default ResponseEntity<Void> isAuthenticated(
        
    ) {
        return getDelegate().isAuthenticated();
    }


    /**
     * POST /auth/login : Attempts authentication.
     * Submits an username-password authentication request for login purposes. 
     *
     * @param authenticationRequest  (required)
     * @return Ok (status code 200)
     */
    @Operation(
        operationId = "login",
        summary = "Attempts authentication.",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthenticationResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AuthenticationResponse> login(
        @Parameter(name = "AuthenticationRequest", description = "", required = true) @Valid @RequestBody AuthenticationRequest authenticationRequest
    ) {
        return getDelegate().login(authenticationRequest);
    }

}
